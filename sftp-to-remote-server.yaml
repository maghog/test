---
- name: SFTP to remote server
  hosts: all
  become: no  # Assuming no privileged escalation required for scp

  # vars_files:
  #   - credentials.yml

  vars:
    file_pattern: "*.txt"  # Specify your file name pattern here
    remote_destination: /home/ansible/sftp/to_raindance/400/tmp/  # Specify your remote destination directory
    new_directory: /home/ansible/sftp/to_raindance/400/  # Specify the directory where files will be moved
    error_log_file: /home/ansible/ansiblesemaphore/files/raindance/log/error_log.txt  # Specify the path to the error log file

  tasks:
    - name: Find files matching the pattern on the local machine
      find:
        paths: /home/ansible/ansiblesemaphore/files/raindance/to_raindance/
        patterns: "{{ file_pattern }}"
      register: local_files

    - name: Copy files to the remote server using scp
      expect:
        #command: scp /home/ansible/ansiblesemaphore/files/raindance/to_raindance/{{ item.path | basename }} {{ server_username }}@sv-dev01.alleskolan.eu:{{ remote_destination }}
        command: scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null /home/ansible/ansiblesemaphore/files/raindance/to_raindance/{{ item.path | basename }} {{ server_username }}@sv-dev01.alleskolan.eu:{{ remote_destination }}
        #command: scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r {{ source_files | join(' ') }} {{ remote_username }}@{{ inventory_hostname }}:{{ remote_directory }}
        responses:
          "password": "{{ server_password }}"
      with_items: "{{ local_files.files }}"
      register: scp_result

    - name: Handle errors if scp fails
      block:
        - name: Check if scp was successful
          fail:
            msg: "SCP operation failed"
          when: scp_result.failed

        - name: Notify success
          debug:
            msg: "Files copied successfully to the remote server using scp"
          when: not scp_result.failed

        - name: Move files on the remote server if scp was successful
          ansible.builtin.shell: mv "{{ remote_destination }}/{{ item.item.path | basename }}" "{{ new_directory }}"
          with_items: "{{ scp_result.results }}"
          when: not scp_result.failed

      rescue:
        - name: Handle errors and log to file
          ansible.builtin.debug:
            msg: "An error occurred during the scp operation: {{ scp_result.results | map(attribute='stdout_lines') | list }}"
          register: error_message

        - name: Log errors to file
          ansible.builtin.lineinfile:
            path: "{{ error_log_file }}"
            line: "{{ ansible_date_time.iso8601 }} - {{ error_message.msg }}"
          when: scp_result.failed

        - name: Send email on error
          mail:
            subject: "Error in Ansible Playbook"
            body: "An error occurred during the scp operation: {{ error_message.msg }}"
            to: your_email@example.com
            from: ansible@example.com
            server: your_smtp_server
            username: your_smtp_username
            password: your_smtp_password
          when: scp_result.failed
